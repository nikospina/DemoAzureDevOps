trigger:
- dev
- qa
- master

variables:
  buildConfiguration: 'Release'
  
stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-16.04'
      demands:
       - npm

    variables:
      wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
      dotnetSdkVersion: '3.0.x'
      
    steps:
    - task: SonarQubePrepare@4
      displayName: 'SonarQube Prepare'
      inputs:
        SonarQube: 'mysonarqube'
        scannerMode: 'MSBuild'
        projectKey: 'demoAzureDevOps'
        projectName: 'demoAzureDevOps'
        projectVersion: '1.0'
        
    - script: |
      curl https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873-linux.zip --output sonarInstall.zip && unzip sonarInstall.zip
      displayName: 'Install Sonar Exec'
    
    sonar-scanner-4.2.0.1873-linux
    $(Build.SourcesDirectory)
        
    - task: UseDotNet@2
      displayName: 'Install .net core 3.0 (preview)'
      inputs:
        packageType: sdk
        version: '3.0.101'
    
    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        verbose: false
    
    - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
      displayName: 'Compile Sass assets'
    
    - task: gulp@1
      displayName: 'Run gulp tasks'
    
    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)
    
    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
        
    - template: templates/build.yml
      parameters:
        buildConfiguration: 'Release'
        
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      condition: succeeded()
    
    - task: DotNetCoreCLI@2
      displayName: 'Install ReportGenerator'
      inputs:
        command: custom
        custom: tool
        arguments: 'install --global dotnet-reportgenerator-globaltool'
    
    - task: DotNetCoreCLI@2
      displayName: 'Run unit tests - $(buildConfiguration)'
      inputs:
        command: 'test'
        arguments: '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
        publishTestResults: true
        projects: '**/*.Tests.csproj'
        
    - script: | 
      sonar-scanner -Dsonar.projectKey=demoAzureDevOps -Dsonar.sources=$(Build.SourcesDirectory) -Dsonar.host.url=http://mysonarqube.darkaru.net -Dsonar.login=2eb5aadcd095faaacba1302e8a1c0d0c88a202ac
      displayName: 'Sonar Scan'
      workingDirectory: sonar-scanner-4.2.0.1873-linux/bin    
    
    - script: |
        reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines
      displayName: 'Create code coverage report'
    
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      inputs:
        codeCoverageTool: 'cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

  - job: 'BuildAndPushDocker'
    displayName: 'Build & Publish Container Job'
    condition: |
      and
      (succeeded(),
      ne(variables['Build.Reason'], 'PullRequest')
      )
    
    steps:        
    - script: 'docker build -t tailspin .'
      displayName: 'Build Container'
      condition: succeeded()
      
    - script: 'docker tag tailspin $(DOCKERHUBUSER)/tailspin:$(Build.BuildNumber)'
      displayName: 'Tag Container'
      condition: succeeded()
      
    - script: 'docker login -u $(DOCKERHUBUSER) -p $(DOCKERHUBPASS)'
      displayName: 'Docker Login'
      condition: succeeded()
      
    - script: 'docker push $(DOCKERHUBUSER)/tailspin:$(Build.BuildNumber)'
      displayName: 'Docker Push'
      condition: succeeded()      

- stage: 'Deploy'
  displayName: 'Deploy application'
  jobs: 
  - job: 'Deploy'
    displayName: 'Deploy AKS Job'
    condition: |
      and(
      succeeded(),
      ne(variables['Build.Reason'], 'PullRequest')
      )

    steps:
    - script: "sed -i 's/BUILDVERSION/$(Build.BuildNumber)/' dev-manifest.yaml"
      workingDirectory: deployManifests
      displayName: 'Updating Deployment Version'
      condition: |
        and
        (
          succeeded(),
          eq(variables['Build.SourceBranchName'], 'dev')
        )

    - task: Kubernetes@1
      displayName: 'Deploy in dev namespace'
      condition: |
        and
        (
          succeeded(),
          eq(variables['Build.SourceBranchName'], 'dev')
        )
      inputs:
        connectionType: Kubernetes Service Connection
        kubernetesServiceEndpoint: aksDev
        command: apply
        arguments: -f deployManifests/dev-manifest.yaml -n dev
        
    - script: "sed -i 's/BUILDVERSION/$(Build.BuildNumber)/' qa-manifest.yaml"
      workingDirectory: deployManifests
      displayName: 'Updating Deployment Version'
      condition: |
       and
        (
          succeeded(),
          eq(variables['Build.SourceBranchName'], 'qa')
        )
        
    - task: Kubernetes@1
      displayName: 'Deploy in qa namespace'
      condition: |
       and
       (
         succeeded(),
         eq(variables['Build.SourceBranchName'], 'qa')
       )
      inputs:
        connectionType: Kubernetes Service Connection
        kubernetesServiceEndpoint: aksQa
        command: apply
        arguments: -f deployManifests/qa-manifest.yaml -n qa

    - script: "sed -i 's/BUILDVERSION/$(Build.BuildNumber)/' prd-manifest.yaml"
      workingDirectory: deployManifests
      displayName: Updating Deployment Version
      condition: |
        and
        (
          succeeded(),
          eq(variables['Build.SourceBranchName'], 'master')
        )    
    
    - task: Kubernetes@1
      displayName: Deploy in prd namespace
      condition: |
       and
       (
         succeeded(),
         eq(variables['Build.SourceBranchName'], 'master')
       )
      inputs:
        connectionType: Kubernetes Service Connection
        kubernetesServiceEndpoint: aksPrd
        command: apply
        arguments: -f deployManifests/prd-manifest.yaml -n prd
